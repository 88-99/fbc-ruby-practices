#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

NUMBER_OF_COLUMNS = 3

def main(argv_option)
  filenames = search_filenames(argv_option)
  filenames_transposed = prepare_to_transpose(filenames)
  max_characters_of_filename = demand_max_characters_of_filename(filenames)

  filenames_transposed.each do |column|
    columns = [column[0].to_s.ljust(max_characters_of_filename)]
    demand_column_indexes.each { |i| columns << column[i].to_s.ljust(max_characters_of_filename) }
    puts columns.join(' ' * 4)
  end
end

def parse_option(argv)
  argv_option = {}
  OptionParser.new do |opt|
    opt.on('-a') { |v| argv_option[:a] = v }
    opt.parse!(argv)
  end
  argv_option
end

argv_option = parse_option(ARGV)
def search_filenames(argv_option)
  argv_option[:a] ? Dir.glob('*', File::FNM_DOTMATCH) : Dir.glob('*')
end

def demand_max_characters_of_filename(filenames)
  filenames.compact.map(&:length).max
end

def demand_column_indexes
  1.upto(NUMBER_OF_COLUMNS - 1).map { |x| x }
end

def prepare_to_transpose(filenames)
  quotient, remainder = filenames.length.divmod(NUMBER_OF_COLUMNS)
  if remainder != 0
    (NUMBER_OF_COLUMNS - remainder).times { filenames << nil }
    filenames.each_slice(quotient + 1).to_a.transpose
  else
    filenames.each_slice(quotient).to_a.transpose
  end
end

main(argv_option)
