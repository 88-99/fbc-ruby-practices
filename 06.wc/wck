#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'debug' # debugger

def main
  options = ARGV.getopts('lwc')
  options = { 'l' => true, 'w' => true, 'c' => true } if options.values.none?

  if ARGV.empty?
    stdin_read = $stdin.read
    lines, words, sizes = conversion_values(options, stdin_read)

    puts stdin_form(lines, words, sizes)
  else
    lines, words, sizes = ARGV.map { |path| conversion_values(options, File.read(path)) }.transpose # File.read(path) はファイルの中身の文字列

    puts paths_form(lines, words, sizes)
    puts total(line: options['l'], word: options['w'], size: options['c']) if ARGV.length > 1
  end
end

def conversion_values(options, stdin_read_or_paths)
  lines = option_l(stdin_read_or_paths) if options['l'] # 必要なオプションの値を代入
  words = option_w(stdin_read_or_paths) if options['w']
  sizes = option_c(stdin_read_or_paths) if options['c']
  [lines, words, sizes]
end

def option_l(stdin_read_or_paths)
  stdin_read_or_paths.lines.count # stdin_read_or_paths はファイルの中身の文字列
end

def option_w(stdin_read_or_paths)
  stdin_read_or_paths.split(/\s+/).count
end

def option_c(stdin_read_or_paths)
  stdin_read_or_paths.bytesize
end

def stdin_form(lines, words, sizes)
  [lines, words, sizes].compact.join(' ' * 4)
end

def paths_form(lines, words, sizes)
  transposed = [lines, words, sizes, ARGV].compact.transpose
  transposed.map do |row|
    row.join(' ' * 4)
  end
end

def total(line: false, word: false, size: false)
  line_total = ARGV.map { |path| File.read(path).lines.count }.sum if line
  word_total = ARGV.map { |path| File.read(path).split(/\s+/).count }.sum if word
  size_total = ARGV.map { |path| File.read(path).bytesize }.sum if size
  [line_total, word_total, size_total].compact.join(' ' * 4)
end

main
