#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

def main
  params = ARGV.getopts('lwc')
  lines, words, sizes = path_or_stdin
  option_conversion = { 'l' => lines, 'w' => words, 'c' => sizes }
  selected_options = select_option(params)
  transposed_values, values_length = transpose_safely(selected_options, option_conversion)
  puts_form(transposed_values, values_length)
end

def path_or_stdin
  if ARGV.empty?
    stdin_read = $stdin.read
    make_stdin_options(stdin_read)
  else
    options = ARGV.map { |path| make_file_options(path) }
    substitute_file_options(options)
  end
end

def make_stdin_options(stdin_read)
  lines = stdin_read.lines.count
  words = stdin_read.split(/\s+/).count
  sizes = stdin_read.size
  [lines, words, sizes]
end

def make_file_options(path)
  {
    line: File.read(path).lines.count,
    word: File.read(path).split(/\s+/).count,
    size: File.read(path).size
  }
end

def substitute_file_options(options)
  lines = options.map { |option| option[:line] }
  words = options.map { |option| option[:word] }
  sizes = options.map { |option| option[:size] }
  [lines, words, sizes]
end

def select_option(params)
  if params.to_a.map { |x| x[1] }.any?
    params.to_a.map { |x| x[0] if x[1] }.compact
  else
    params.to_a.map { |x| x[0] }.compact
  end
end

def transpose_safely(selected_options, option_conversion)
  values = selected_options.map { |option| option_conversion[option] } # hashの値(配列)を取得
  values = ARGV.empty? ? values.compact.map { |x| [] << x } : values << ARGV
  [values.transpose, values.length]
end

def puts_form(transposed_values, values_length)
  indexes = 0.upto(values_length - 1).to_a
  total0 = 0
  total1 = 0
  total2 = 0
  transposed_values.map do |row|
    rows = indexes.map { |i| [] << row[i] }
    puts rows.join(' ' * 4)

    total0 += row[0] if values_length >= 2
    total1 += row[1] if values_length >= 3
    total2 += row[2] if values_length == 4
  end
  puts "#{[total0, total1, total2].slice!(0..values_length - 2).join(' ' * 4)}    total" if !ARGV.empty? && ARGV.length != 1
end

main
