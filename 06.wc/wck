#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

def main
  options = ARGV.getopts('lwc')
  options = { 'l' => true, 'w' => true, 'c' => true } if options.values.none?
  file_names = ARGV

  input_contents = file_names.empty? ? [$stdin.read] : file_names.map { |path| File.read(path) }
  lines, words, sizes = run_wc(options, input_contents)

  puts build_form(lines, words, sizes, file_names)
  puts "#{total(line: options['l'], word: options['w'], size: options['c'], input_contents:)}    total" if file_names.length > 1
end

def run_wc(options, input_contents)
  lines = count_lines(input_contents) if options['l'] # 必要なオプションの値を代入
  words = count_words(input_contents) if options['w']
  sizes = count_bytesize(input_contents) if options['c']
  [lines, words, sizes]
end

def count_lines(input_contents)
  input_contents.map { |path| path.lines.count } # stdin_read_or_file_names はファイルの中身の文字列
end

def count_words(input_contents)
  input_contents.map { |path| path.split(/\s+/).count }
end

def count_bytesize(input_contents)
  input_contents.map(&:bytesize)
end

def build_form(lines, words, sizes, file_names)
  if file_names.empty?
    [lines, words, sizes].compact.join(' ' * 4)
  else
    transposed = [lines, words, sizes, file_names].compact.transpose
    transposed.map { |row| row.join(' ' * 4) }
  end
end

def total(line: false, word: false, size: false, input_contents:)
  line_total = input_contents.map{ |ic| ic.lines.count }.sum if line
  word_total = input_contents.map{ |ic| ic.split(/\s+/).count }.sum if word
  size_total = input_contents.map{ |ic| ic.bytesize }.sum if size
  [line_total, word_total, size_total].compact.join(' ' * 4)
end

main
